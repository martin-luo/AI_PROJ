Author: 
Student Name: An Luo
Login ID : aluo1
Student Name: Bingfeng liu
Login ID : bingfengl

===Notes===

*The player class is called 'Bingfengl.java'

*No Library used in part B . ^.^

*Can use 1281k memory limit to run for N=6 ,5m for N=7 . (tested on dimefox,if it is slow
in different machine please relax the memory limit Thanks!)

*since the submission system does not allowed to upload folders , 
the 'aiproj' package/folder which includes Player.java,Move.java,
Piece.jave is needed to run this AI board game player(Bingfengl).

*This subission included 'testArea.java' which is a main function
it can be used to test AI by hand. Enter 'row col' ( terminal : 1 2)
and hit enter to put your cell and hit enter again to ask AI to move.

*killer heuristic is implemented but buggy so it is leaved unused
due to lack of time, the logics behid this heuristic will be 
explained later in this comments.txt

*No machine learning is used due to lack of time

===Introduction===

This document is for COMP30024 for explaining the algorithms uesd to
achieve project part B.

The part B of this project is asked for a fully functioned AI program
which can play a 'GO'-liked board game.

The main algorithms used in this programs are 'circle finding','captured
cells counting','alpha beta minimax with heuristic evaluations'.

The 'circle finding' and 'captured cells counting' algorithms are
explained detaily in part A's comments.txt. In the short word they
are used to keep track of the board state (e.g. which part is captured
by who). 


===Main algorithms and heuristics in Part B===

To pick the best moves 'alpha beta minimax' is used, the main idea 
behind minimax is really simple , it picks best move by populating 
'all' (most ) of the possibe movements with evaluation functions 
which estimate the possibility of winning the game for our player
in each possible 'current' states.

The alpha-beta minimax in this program is tunable which means that
the branchs and depths can be set by passing in parameters ,so
it has a possibility to expand different amount of nodes in different
stages of the game , however due to the lack of time , the branches is
set to be 3 and depth is 2. 

Unlike the normal use of alpha-beta minimax, even though only 3 branches
are expanded in the minimax , but all of these 3 branches(moves) are picked
from at most N*N possible moves (if N =6, each 3 brances are picked from
36 possible moves, in the other word each node of each level of this
minimiax is generated from another first level minimax tree)

So the complexity of this 'minimax' is (N^2)*Branch^(depth)


For the evaluation function, it is consisted with
following values:

-connectedPathValue*A

-nearlyCompleteCircleValue*B

-criticalBlockValue*C

-captured*D

-diag*E

-opponenetCaptured*F;

(A,B,C,D,E,F are the weight/constants for each values to determine
how 'important' the 'value' is. E.g. if an AI which want to capture
as many cells as possible and ignoring blocking opponent's circle
the 'caputred' value can be assigned a huge constant)

connectedPathValue ==> 

is really easy to get ,basically 
it just count how many same player's cells are next to each other

nearlyCompleteCircleValue==>

This value is estimated use the start point ,mid point and end
point of a nearly formed circle path.


B B B
B
B B B

above is the original path diagram 

B B S
M
B B E

Firstly we calculate the mid point (C) of S E 

B B S
M   C
B B E

Secondly we calculate the mid point (D) of C and M

B B S
M D
B B E

Finally we got a point which is in the middle of this nearly
finished circle path ,and we start to keep expanding
D's surrounding cells until its expanded surrounding area contained
all the cells of this 'nearly/unfinished' circle path.

(D will gradually increase its number of surrounding area ,see
illustration below for the concept of expansion)

X X X
X D X
X X X ===> first level expansion 


X X X X X
X X X X X
X X D X X
X X X X X
X X X X X ===> second level expansion keep expanding untile D's 
expansion area include the whole nearly finished circle path cells

The expansion level values and number of cells in the path and the
distance of start point and end point of this path are all used
to estimate the value of this nearly finished circle (to determine
how valuable is this nearly finished circle)


criticalBlockValue ==> 

this value is estimated with a heuristic. 
This value is obtained when a circle is nearly complete but it 
is blocked by one opponent cell

  B
B   B
  W

In the above case player 'White' will gain criticalBlockValue by
blocking player 'Black' to form a circle .


  M
S   E
  W

The heuristic to get this value is that when the 'finding circle'
algorithm trys to find whether if player 'Black' formed a circle
or not ,it will trace the path from S(start point==>black cell) to 
E (end point ===> black cell), these two cells' 8 surrounding cells
will be expand, if they all found 'W' cell in their surrounding cells
then we can say that W blocks B to form a circle, 
W has a criticalBlockValue Now.

  M
S W E


But only using S and E is not enough , the above cause will also
be determined as W blocking the 'B' to form circle, but actually
W is not blocking it,but stepping in the future captured 
area of player 'Black' circle. Therefore 'M' is used to prevent
this kind of situation,'M' is the mid point of the nearly formed
circle path, if we found 'W' is in the surrounding of S and E , and 
if 'W' has M as its one of its 8 direction surrounding, we can determine
that 'White' cell in this case is not blocking the circle, so White player
will not gain criticalBlockValue.   

captured and OpponenetCaputred===>

This value is basically how many cells are captured
by 'W' and 'B' or other way around. It is basically
obtained from part A's circle finding and captured cells
counting algorithms

diag ===>
this value is easily obtained from expanding cells to see
whether if its diagonal direction top-left, top-right,bottom-left
,bottom-right contained the same player's cell.
The reason for estimating the diag value for players is that
it is more easy to form circle if player move diagonally ,it 
will have big possibility to get atleast one cell captured.

 B   B
   B X B
 B X B
   B
===> moving diagonally 

===killer Heuristic===
Note: it is implemented in this program but it is buggy so 
it is not used to prune the minimax branch.

However we still want to talk about the logics behind it.
The idea behind our killer heuristic is that, if a cell (
black or white) has contiguous surrounding cells of same colour
we won't expand the branch of this minimax node.

e.g.

W W W
W B

- - -
|B W
|W W
|

| ===> board border 

if we expand B , it has 4 contiguous same colour cells (in 
here they are white cell), so it is pointless to put cell in here
and so it is also pointless to explore its future states this kind 
of moveming will be assigned initialy utility value which is 0, which
means such move will be picked at last and its children will be cutting
off.

===Code Structure===

AidUtility.java
	-Contains most array processing methods
FindCircleAndCapturedCellAlgorithm.java
	-The alogrithm to update board state (finding circle,count captures,
	get evaluation function needed attributes)

Bingfengl.java
	-Player

Board.java
	-Stores board state

MinMaxAlgorithm.java
	-Alpha-beta minimax

BoardDataCircleStructure.java
	-Store circle path

SimpleBoardCountingAlgorithm.java
	-simple algorithm to count captures

BoardUpdateAlgorithm.java
	-Abstract Class for using different finding circle
	and captures alg

CeilingDataStructure.java
	-data structure to count captures cells in circle path

CellNode.java
	-each single cell for circle path

TreeNode.java
	-node for minimax

#for testing 
Test_main.java
TestArea.java
testMinMax.java
Main.java

===Conclusion===

This is really a challenging but intersting project we ever did in this university.
It really bordern our ways of coding , it is a first time we use heuristics in our code 
and we found it really exciting about making some heuristic which has very simple
logics behind it but it actually makes our AI to approach the goal.

Even though we did not completely finished what we were thinking to do, but this 
challenging project did help us a lot at exploring the limits of our coding skills.













